# -*- coding: utf-8 -*-
"""
Created on Fri Mar 15 20:12:22 2019

@author: Nicole
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

#%%Energy generation from PVs

# Class to import data from PVGIS csv file
# Selected column provides irradiance data (kW/m) for one panel

class PVasset():
    """
    PV asset class
    
    Input
    -----
    Capacity : float
        PV capacity, kW.
    """
    def __init__(self,capacity):
        self.capacity = capacity
        self.asset_type = 'PV'
        super().__init__()
        
    def getOutput(self, dt):
        """
        Return PV output
        
        Input
        -----
        dt : float
            Time interval (hours)
            
        Returns
        -------
        PV output : numpy array
        """
        df = pd.read_csv('PVGIS_22deg_-5deg_2007_2016.csv', usecols=[9])
        solar = df.values
        output = solar * self.capacity * dt
        self.output = output
        return output
    
    
#%% Load averaged hourly data over a year
        
''' Fixed parameters '''

pv_area = 1.956*0.992 #area of one panel        
    
''' Variables '''

dt = 60/60 #time period (hr)

pv_efficiency = 0.18 #efficiency of one panel (max 0.18, degrades with time)

pv_losses = 0.14 #losses from wires/inverters/etc; 0.14 recommended by PVGIS

pv_number = 4995 #total number of panels (max 4995, given 15 panels per 3-bay unit, 1000 bays total)    

''' Generating solar profile '''

pv_capacity = pv_efficiency*pv_area #at max efficiency this is 0.35kW as manufacturer states

pv_site1 = PVasset(pv_capacity*pv_number*(1-pv_losses)) #energy generated by all installed panels

solar_profile = pv_site1.getOutput(dt)

#%% Plot solar profile

plt.plot(solar_profile)
plt.title('Energy Generation Over One Year')
plt.xlabel('Month')
plt.ylabel('Energy (kWh)')
plt.xticks([0,744,1416,2160,2880,3624,4344,5088,5832,6552,7296,8016],['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])
#plt.savefig('Report/Pics_NK/energygeneration_final.jpg',dpi = 1000)

#%% Monthly generation

'Total generation in January'
jan = solar_profile[:744]
total_jan = float(sum(jan))

'Total generation in February'
feb = solar_profile[744:1416]
total_feb = float(sum(feb))

'Total generation in March'
mar = solar_profile[1416:2160]
total_mar = float(sum(mar))

'Total generation in April'
apr = solar_profile[2160:2880]
total_apr = float(sum(apr))

'Total generation in May'
may = solar_profile[2880:3624]
total_may = float(sum(may))

'Total generation in June'
jun = solar_profile[3624:4344]
total_jun = float(sum(jun))

'Total generation in July'
jul = solar_profile[4344:5088]
total_jul = float(sum(jul))

'Total generation in August'
aug = solar_profile[5088:5832]
total_aug = float(sum(aug))

'Total generation in September'
sep = solar_profile[5832:6552]
total_sep = float(sum(sep))

'Total generation in October'
oct = solar_profile[6552:7296]
total_oct = float(sum(oct))

'Total generation in November'
nov = solar_profile[7296:8016]
total_nov = float(sum(nov))

'Total generation in December'
dec = solar_profile[8016:8760]
total_dec = float(sum(dec))

print(total_jan,total_feb,total_mar,total_apr,total_may,total_jun,total_jul,total_aug,total_sep,total_oct,total_nov,total_dec)

# Begbroke demand

plt.figure()
monthlygeneration = [total_jan,total_feb,total_mar,total_apr,total_may,total_jun,total_jul,total_aug,total_sep,total_oct,total_nov,total_dec]
plt.plot(monthlygeneration,label='Generation')
plt.xticks([0,1,2,3,4,5,6,7,8,9,10,11], ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])
#plt.title('Monthly Energy Generation Over One Year')
#plt.xlabel('Month')
#plt.ylabel('Energy Generation (kWh)')
#plt.ylim(ymin=0)
#plt.savefig('Report/energygeneration_final_monthly.png', dpi = 1000)

#'Compare to Begbroke'
monthlydemand = np.loadtxt('Data/Begbroke.txt')
plt.plot(monthlydemand,label='Begbroke Demand')

plt.ylim(ymin=0)
plt.title('Monthly Generation vs Begbroke Demand')
plt.xlabel("Month")
plt.ylabel("Energy (kWh)")
plt.legend()
#plt.savefig('Report/begbroke.png',dpi = 1000, bbox_inches = "tight")

#%% Average hourly generation for each month of the year

'Used in total_x_kWh txt files'

print('Average hourly generation on a day in January')
#jan = solar_profile[:744] # 24*31 = 744 (no. values of solar_profile that correspond to Jan)
for i in range(24):
    print(float(sum(jan[i::24])/31))

print('Average hourly generation on a day in February')
#feb = solar_profile[744:1416]
for i in range(24):
    print(float(sum(feb[i::24])/28))
    
print('Average hourly generation on a day in March')
#mar = solar_profile[1416:2160]
for i in range(24):
    print(float(sum(mar[i::24])/31))

print('Average hourly generation on a day in April')
#apr = solar_profile[2160:2880]
for i in range(24):
    print(float(sum(apr[i::24])/30))
    
print('Average hourly generation on a day in May')
#may = solar_profile[2880:3624]
for i in range(24):
    print(float(sum(may[i::24])/31))
    
print('Average hourly generation on a day in June')
#jun = solar_profile[3624:4344]
for i in range(24):
    print(float(sum(jun[i::24])/30))
    
print('Average hourly generation on a day in July')
#jul = solar_profile[4344:5088]
for i in range(24):
    print(float(sum(jul[i::24])/31))
    
print('Average hourly generation on a day in August')
#aug = solar_profile[5088:5832]
for i in range(24):
    print(float(sum(aug[i::24])/31))
    
print('Average hourly generation on a day in September')
#sep = solar_profile[5832:6552]
for i in range(24):
    print(float(sum(sep[i::24])/30))
    
print('Average hourly generation on a day in October')
#oct = solar_profile[6552:7296]
for i in range(24):
    print(float(sum(oct[i::24])/31))
    
print('Average hourly generation on a day in November')
#nov = solar_profile[7296:8016]
for i in range(24):
    print(float(sum(nov[i::24])/30))
    
print('Average hourly generation on a day in December')
#dec = solar_profile[8016:8760]
for i in range(24):
    print(float(sum(dec[i::24])/31))
